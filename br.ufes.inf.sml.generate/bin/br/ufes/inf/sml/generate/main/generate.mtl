[comment encoding = UTF-8 /]
[**
 * Main module that generate all code.
 */]
[module generate('http://www.example.org/sml')]

[import br::ufes::inf::sml::generate::main::resources /]
[import br::ufes::inf::sml::generate::main::staticfiles /]
[import br::ufes::inf::sml::generate::main::entities /]

[**
 * The main template that generate the rule file, java code for situation elements and project files (Main class) 
 */]
[template public generateElement(aSMLModel : SMLModel)]
[comment @main/]

[droolsRules(aSMLModel)/]

[javaEntities(aSMLModel)/]

[javaStatic(aSMLModel)/]

[/template]

[**
 * Generate a drools rule file that represents situations in SML model 
 */]
[template public droolsRules(aSMLModel : SMLModel)]
[file (getProperty('genDir')+'/'+getProperty('ruleDir')+'/'+getProperty('situationFile'), false, 'UTF-8')]
package [getProperty('droolsPackage')/];

import org.drools.situation.base.SituationHelper;
import org.drools.situation.base.CurrentSituation;
import org.drools.situation.base.ActivateSituationEvent;
import org.drools.situation.base.DeactivateSituationEvent;
import [getProperty('javaPackage')/].model.*;
import [getProperty('javaPackage')/].situation.*;
import [getProperty('builtinsPackage')/].*;


[for (s : SituationType | elements)]
[rule(s)/]
[/for]

[/file]
[/template]

[**
 * A single drools rule representing a situation in SML
 */]
[template public rule(s : SituationType)]
rule "[s.name/] Rule"
    when
        [LHS(s)/]
    then
        SituationHelper.situationDetected(drools, [s.name()/].class);

end
[/template]

[**
 * The LHS of a rule, composed by drools paterns representing situation elements, relators and other situation that composes a situation
 */]
[template public LHS(s : SituationType)]
	[for (e : SituationTypeElement | ordered(elements->filter(Participant)))]
		[if (e.oclIsTypeOf(EntityParticipant))]
[entity(e.oclAsType(EntityParticipant))/]
		[elseif (e.oclIsTypeOf(RelatorParticipant))]
[relator(e.oclAsType(RelatorParticipant))/]
		[elseif (e.oclIsKindOf(SituationParticipant))]
[situation_ref(e.oclAsType(SituationParticipant))/]
		[/if]
	[/for]
	[for (f : Function | elements->filter(Function))]
		[for (rel : ComparativeRelation | sourceRelation)]
eval([f.function.name.clean()/]([for (p : Parameter | f.parameters()) separator (', ')][value(p.value)/][/for]) [comparative_relation(rel)/] [value(rel.target)/])
		[/for]
	[/for]
[/template]

[**
 * Drools pattern for an EntityParticipant in SML model
 */]
[template public entity(e : EntityParticipant)]
[binding_name(e)/] : [e.isOfType.name.clean()/]([relations(e)/])
[/template]

[**
 * Drools pattern for a RelatorParticipant in SML model
 */]
[template public relator(r : RelatorParticipant)]
[binding_name(r)/] : [r.isOfType.name.clean()/]([relations(r)/])
[/template]

[**
 * Drools pattern for a SituationParticipant in SML model
 * @FIXME Literal removed, situation attribute removed
 */]
[template public situation_ref(s : SituationParticipant )post (trim())]
[if (s.oclIsTypeOf(ExistsSituation))]
[situation_exixts(s.oclAsType(ExistsSituation))/]
[else]
[binding_name(s)/]:[situationType.name()/]([relations(s)/])
[if (s.isPast)]
//not(exists(CurrentSituation (situation == [binding_name(s)/]))) // implemented as 'active == false'
[else]
//exists(CurrentSituation (situation == [binding_name(s)/])) // implemented as 'active == true'
[/if]
[situation_attribute(s)/]
[/if]
[/template]

[template public situation_exixts(s : ExistsSituation) post (trim())]
[if (s.oclAsType(ExistsSituation).isNegated)]not([/if]exists([binding_name(s)/]:[situationType.name()/]([relations(s)/])
	and [if (s.isPast)]not([/if]exists(CurrentSituation (situation == [binding_name(s)/]))[if (s.isPast)])[/if])[if (s.oclAsType(ExistsSituation).isNegated)])[/if]
[/template]

[template public situation_attribute(s : SituationParticipant) post (trim())]
[for (a : AttributeReference | reference)]
	[if (s.oclIsTypeOf(ExistsSituation))]
		[if (s.oclAsType(ExistsSituation).isNegated)]not([/if]exists(
	[/if]
	[if (a.attribute.name = 'final time')]
		DeactivateSituationEvent(situation == [binding_name(s)/]) over window:time([time_litral(a.time_attrubute())/])
	[elseif (a.attribute.name = 'initial time')]
		ActivateSituationEvent(situation == [binding_name(s)/]) over window:time([time_litral(a.time_attrubute())/])
	[else]
		// activate over window or current with duration > time
	[/if]
	[if (s.oclIsTypeOf(ExistsSituation))][if (s.oclAsType(ExistsSituation).isNegated)])[/if])
	[/if]
[/for]
[/template]



[**
 * Internal name of an element in a rule
 */]
[template public binding_name(n : ExportableNode) post (trim())]
	[if (n.nodeParameter.oclIsUndefined())]
		[let unamed : OrderedSet(Participant) = ordered(n.eContainer(SituationType).elements->filter(Participant))->select(e:Participant | e.nodeParameter.oclIsUndefined())]
			[if (n.oclIsTypeOf(EntityParticipant))]
				        $[n.oclAsType(EntityParticipant).isOfType.name.toLower()/][unamed->filter(EntityParticipant)->select(e:EntityParticipant| e.isOfType = n.oclAsType(EntityParticipant).isOfType)->indexOf(n)/]
			[elseif (n.oclIsTypeOf(RelatorParticipant))]
				       $[n.oclAsType(RelatorParticipant).isOfType.name.toLower()/][unamed->filter(RelatorParticipant)->select(e:RelatorParticipant| e.isOfType = n.oclAsType(RelatorParticipant).isOfType)->indexOf(n)/]
			[elseif (n.oclIsKindOf(SituationParticipant))]
				$[n.oclAsType(SituationParticipant).situationType.name.toLower()/][unamed->filter(SituationParticipant)->select(e:SituationParticipant| e.situationType = n.oclAsType(SituationParticipant).situationType)->indexOf(n)/]
			[/if]
		[/let]
	[else]
		[n.nodeParameter.name.clean()/]
	[/if]
[/template]

[**
 * Literal values
 */]
[template public literal(literal : Literal)]
[if (literal.dataType.name = 'String')]
"[literal.value/]"
[elseif (literal.dataType.name = 'Number')]
[literal.value/]
[else]
new [literal.dataType.name.clean()/]("[literal.value/]")
[/if]
[/template]

[**
 * Internal name of an attibute of a element in a rule
 * FIXME Fazer um get_entity()
 */]
[template public attr_name(attr : AttributeReference)]
[binding_name(attr.entity)/]_[attribute.name.clean()/]
[/template]

[**
 * Internal name of an situation participant in a rule
 */]
[template public sit_param_name(param : SituationParameterReference)]
[binding_name(param.situation)/]_[param.parameter.name.clean()/]
[/template]

[**
 * Representation in drools of a refered Node (literals, attributes, entities, situation)
 */]
[template public value(n : Node) post (trim())]
	[if (n.oclIsTypeOf(EntityParticipant))]
		[binding_name(n.oclAsType(EntityParticipant))/]
	[elseif (n.oclIsTypeOf(RelatorParticipant))]
		[binding_name(n.oclAsType(RelatorParticipant))/] 
	[elseif (n.oclIsTypeOf(AttributeReference))]
		[attr_name(n.oclAsType(AttributeReference))/]
	[elseif (n.oclIsTypeOf(Literal))]
		[literal(n.oclAsType(Literal))/]
	[elseif (n.oclIsTypeOf(SituationParameterReference))]
		[sit_param_name(n.oclAsType(SituationParameterReference))/]
	[elseif (n.oclIsTypeOf(SituationParticipant))]
		[binding_name(n.oclAsType(SituationParticipant))/]
	[/if]
[/template]

[**
 * SML ComparativeRelation represented as operators in drools
 */]
[template public comparative_relation(rel : ComparativeRelation)]
[if(isNegated)]not [/if][drools_relation(relation)/][if (not parameter.oclIsUndefined() and not (parameter = ''))]['['/]"[parameter/]"[']'/][/if]
[/template]


[**
 * Drools representation of any relation between situation elements
 */]
[template public relations(node : Node) post (trim().replaceAll('\n', ', '))]
[if (node.oclIsTypeOf(EntityParticipant))]
[formal_relations(node.oclAsType(EntityParticipant))/]
[elseif (node.oclIsTypeOf(RelatorParticipant))]
[formal_relations(node.oclAsType(RelatorParticipant))/]
[material_relations(node.oclAsType(RelatorParticipant))/]
[elseif (node.oclIsKindOf(SituationParticipant))]
[situation_relations(node.oclAsType(SituationParticipant))/] 
[/if]
[/template]


[**
 * Formal relations between elements of a situation
 * @FIXME posso inverter a ordem dos atributos caso seja uma relacao "circular"
 * FIXME colocar apenas os atributos que sao referenciados?
 */]
[template public formal_relations(e : Participant) post (trim())]
[for (a : AttributeReference | e.reference)]
[if (e.reference.attribute->indexOf(a.attribute) >= e.reference->indexOf(a))][comment: avoid duplications/]
[attr_name(a)/]:[a.attribute.name.clean()/]
[/if]
[/for]
[for (rel : ComparativeRelation | e.sourceRelation)]
this [comparative_relation(rel)/] [value(rel.target)/]
[/for]
[for (att : AttributeReference | e.reference)]
	[if (sourceRelation->size() = 1)]
[att.attribute.name.clean()/] [comparative_relation(sourceRelation->first())/] [value(sourceRelation.target->first())/]
	[elseif (sourceRelation->size() > 1)]
[att.attribute.name.clean()/] ( [for (rel : ComparativeRelation | sourceRelation) separator (' || ')][comparative_relation(rel)/] [value(rel.target)/][/for] )
	[/if]
[/for]
[/template]

[**
 * Material relations between elements of a situation
 */]
[template public material_relations(rel : RelatorParticipant) post (trim())]
[for (link : Link | rel.eContainer(SituationType).eAllContents(Link)->select(l:Link | l.relator = rel ))]
[isOfType.name.clean()/] == [binding_name(entity)/]
[/for]
[/template]

[**
 * Situation specific relations (temporal and formal)
 */]
[template public situation_relations(s : SituationParticipant) post (trim())]
[for (rel : ComparativeRelation | s.sourceRelation)]
this [comparative_relation(rel)/] [value(rel.target)/]
[/for]
[for (p : SituationParameterReference | parameter)]
[if (p.targetRelation->size()>0)]
[sit_param_name(p)/]:[p.parameter.name.clean()/]
[/if]
[for (r : ComparativeRelation | p.sourceRelation)]
[p.parameter.name.clean()/] [comparative_relation(r)/] [value(r.target)/]
[/for]
[/for]
active == [if (s.isPast)]false[else]true[/if]
[/template]

