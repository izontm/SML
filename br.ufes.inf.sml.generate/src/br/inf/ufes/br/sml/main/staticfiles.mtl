[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module staticfiles('http://www.example.org/sml')]

[import br::inf::ufes::br::sml::main::resources /]

[template public javaStatic(aSMLModel : SMLModel)]
[javaMain(aSMLModel)/]

[javaRuleThread(aSMLModel)/]
[/template]

[template public javaMain(aSMLModel : SMLModel)]
[file (getProperty('genDir')+'/'+getProperty('javaDir')+'/'+getProperty('javaPackage').replaceAll('\\.', '/')+'/Main.java', false, 'UTF-8')]
package [getProperty('javaPackage')/];

import org.drools.KnowledgeBase;
import org.drools.KnowledgeBaseFactory;
import org.drools.builder.KnowledgeBuilder;
import org.drools.builder.KnowledgeBuilderConfiguration;
import org.drools.builder.KnowledgeBuilderError;
import org.drools.builder.KnowledgeBuilderErrors;
import org.drools.builder.KnowledgeBuilderFactory;
import org.drools.builder.ResourceType;
import org.drools.builder.conf.EvaluatorOption;

import org.drools.io.ResourceFactory;
import org.drools.runtime.StatefulKnowledgeSession;
import org.drools.situation.base.SituationHelper;

import [getProperty('javaPackage')/].model.*;
import [getProperty('javaPackage')/].situation.*;
import [getProperty('builtinsPackage')/].*;
// [protected ('for imports')]
// 
// import java.lang.*
//
// [/protected]

/**
 * This is a sample class to launch a rule.
 */

public class Main {

	static RuleEngineThread engine = null;
	
    public static final void main(String[ '[' /] [ ']' /]  args) {
        try {
            // load up the knowledge base
            KnowledgeBase kbase = readKnowledgeBase();
            StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();
            engine = new RuleEngineThread(ksession);
            engine.start();
            
			// [protected ('for initial ksession objects')]
			// Insert initial objects in knowledge session, for instance:
			// 
			// Person p = new Person("Mary");
			// ksession.insert(p);
			// 
			// [/protected]
            
        } catch (Throwable t) {
            t.printStackTrace();
        }
    }

    private static KnowledgeBase readKnowledgeBase() throws Exception {
    	
    	KnowledgeBuilderConfiguration builderConf = KnowledgeBuilderFactory.newKnowledgeBuilderConfiguration();
        SituationHelper.setBuilderConfSituationAwareness(builderConf);
		// [protected ('for aditional conf')]
		// Insert aditional options here, for instance:
		// 
		// builderConf.setOption(EvaluatorOption.get("near", new NearEvaluatorDefinition()));
		// 
		// [/protected]
    	KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder(builderConf);
    	SituationHelper.setKnowledgeBuilderSituationAwareness(kbuilder);
        
    	//Rule Resources
    	kbuilder.add(ResourceFactory.newClassPathResource("[getProperty('situationFile')/]"), ResourceType.DRL);

		// [protected ('for aditional resources')]
		// Insert aditional resources here, for instance:
		// 
		// kbuilder.add(ResourceFactory.newClassPathResource("my.drl"), ResourceType.DRL);
		// 
		// [/protected]
   
        SituationHelper.refactorSaliences(kbuilder);
        
        KnowledgeBuilderErrors errors = kbuilder.getErrors();
        if (errors.size() > 0) {
            for (KnowledgeBuilderError error: errors) {
                System.err.println(error);
            }
            throw new IllegalArgumentException("Could not parse knowledge.");
        }        

        
        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();
        kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
        
        return kbase;
    }

}

[/file]
[/template]

[template public javaRuleThread(aSMLModel : SMLModel)]
[file (getProperty('genDir')+'/'+getProperty('javaDir')+'/'+getProperty('javaPackage').replaceAll('\\.', '/')+'/RuleEngineThread.java', false, 'UTF-8')]
package [getProperty('javaPackage')/];

import org.drools.runtime.StatefulKnowledgeSession;

class RuleEngineThread extends Thread {
	
	private StatefulKnowledgeSession ksession;
	
	public RuleEngineThread(StatefulKnowledgeSession ksession) {
		this.ksession = ksession;
	}

    public void run() {
    	
    	this.ksession.fireUntilHalt();
    	
    }

}

[/file]
[/template]