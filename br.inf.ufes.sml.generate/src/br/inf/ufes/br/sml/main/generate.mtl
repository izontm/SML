[comment encoding = UTF-8 /]
[**
 * Main module that generate all code.
 */]
[module generate('http://www.example.org/sml')]

[import br::inf::ufes::br::sml::main::resources /]
[import br::inf::ufes::br::sml::main::staticfiles /]
[import br::inf::ufes::br::sml::main::entities /]

[**
 * The main template that generate the rule file, java code for situation elements and project files (Main class) 
 */]
[template public generateElement(aSMLModel : SMLModel)]
[comment @main/]

[droolsRules(aSMLModel)/]

[javaEntities(aSMLModel)/]

[javaStatic(aSMLModel)/]

[/template]

[**
 * Generate a drools rule file that represents situations in SML model 
 */]
[template public droolsRules(aSMLModel : SMLModel)]
[file (getProperty('genDir')+'/'+getProperty('ruleDir')+'/'+getProperty('situationFile'), false, 'UTF-8')]
package [getProperty('droolsPackage')/];

import org.drools.situation.base.SituationHelper;
import org.drools.situation.base.CurrentSituation;
import org.drools.situation.base.ActivateSituationEvent;
import org.drools.situation.base.DeactivateSituationEvent;
import [getProperty('javaPackage')/].model.*;
import [getProperty('javaPackage')/].situation.*;
import [getProperty('builtinsPackage')/].*;


[for (s : SMLModelElement | elements)]
[rule(s.oclAsType(SituationType))/]
[/for]

[/file]
[/template]

[**
 * A single drools rule representing a situation in SML
 */]
[template public rule(s : SituationType)]
rule "[s.name/]Rule"
    when
        [LHS(s)/]
    then
        SituationHelper.situationDetected(drools, [class_name(s)/].class);

end
[/template]

[**
 * The LHS of a rule, composed by drools paterns representing situation elements, relators and other situation that composes a situation
 */]
[template public LHS(c : SituationTypeElementContainer)]
    [let ordered : OrderedSet(SituationTypeElement) = ordered(elements)]
	[for (e : SituationTypeElement | ordered(elements))]
		[if (e.oclIsTypeOf(EntityParticipant))]
[entity(e.oclAsType(EntityParticipant))/]
		[elseif (e.oclIsTypeOf(RelatorParticipant))]
[relator(e.oclAsType(RelatorParticipant))/]
		[elseif (e.oclIsKindOf(SituationParticipant))]
[situation_ref(e.oclAsType(SituationParticipant))/]
		[/if]
	[/for]
	[/let]
[/template]

[**
 * Drools pattern for an EntityParticipant in SML model
 */]
[template public entity(e : EntityParticipant)]
[binding_name(e)/] : [e.isOfType.name/]([relations(e)/])
[/template]

[**
 * Drools pattern for a RelatorParticipant in SML model
 */]
[template public relator(r : RelatorParticipant)]
[binding_name(r)/] : [r.isOfType.name/]([relations(r)/])
[/template]

[**
 * Drools pattern for a SituationParticipant in SML model
 */]
[template public situation_ref(s : SituationParticipant)post (trim())]
[if (s.attribute->size()=0 and s.oclIsTypeOf(ExistsSituation))]
[if (s.oclAsType(ExistsSituation).isNegated)]not([/if]exists([binding_name(s)/]:[class_name(situationType)/]([relations(s)/]) and [if (s.isPast)]not([/if]exists(CurrentSituation (situation == [binding_name(s)/]))[if (s.isPast)])[/if])[if (s.oclAsType(ExistsSituation).isNegated)])[/if]
[else]
[binding_name(s)/]:[class_name(situationType)/]([relations(s)/])
[if (s.isPast)]
not(exists(CurrentSituation (situation == [binding_name(s)/])))
[else]
exists(CurrentSituation (situation == [binding_name(s)/]))
[/if]
	[for (a : SituationAttribute | attribute)]
[if (s.oclIsTypeOf(ExistsSituation))][if (s.oclAsType(ExistsSituation).isNegated)]not([/if]exists([/if][if (a.isOfType.toString() = 'finalTime')]DeactivateSituationEvent[else]ActivateSituationEvent[/if](situation == [binding_name(s)/]) over window:time([a.literal.value.replace(' days', 'd')/])[if (s.oclIsTypeOf(ExistsSituation))][if (s.oclAsType(ExistsSituation).isNegated)])[/if])[/if]
	[/for]
[/if]
[/template]

[**
 * Internal name of an element in a rule
 */]
[template public binding_name(n : Node) post (trim())]
	[if (n.nodeParameter.oclIsUndefined())]
		[if (n.oclIsTypeOf(EntityParticipant))]
			        $[n.oclAsType(EntityParticipant).isOfType.name.toLower()/][ordered(n.eContainer(SituationType).elements)->select(e:SituationTypeElement| e.oclIsTypeOf(EntityParticipant)     and n.nodeParameter.oclIsUndefined() and e.oclAsType(EntityParticipant).isOfType         = n.oclAsType(EntityParticipant).isOfType)->indexOf(n)/]
		[elseif (n.oclIsTypeOf(RelatorParticipant))]
			       $[n.oclAsType(RelatorParticipant).isOfType.name.toLower()/][ordered(n.eContainer(SituationType).elements)->select(e:SituationTypeElement| e.oclIsTypeOf(RelatorParticipant)    and n.nodeParameter.oclIsUndefined() and e.oclAsType(RelatorParticipant).isOfType        = n.oclAsType(RelatorParticipant).isOfType)->indexOf(n)/]
		[elseif (n.oclIsKindOf(SituationParticipant))]
			$[n.oclAsType(SituationParticipant).situationType.name.toLower()/][ordered(n.eContainer(SituationType).elements)->select(e:SituationTypeElement | e.oclIsKindOf(SituationParticipant) and n.nodeParameter.oclIsUndefined() and e.oclAsType(SituationParticipant).situationType = n.oclAsType(SituationParticipant).situationType)->indexOf(n)/]

		[/if]
	[else]
		[n.nodeParameter.name/]
	[/if]
[/template]

[**
 * Literal values
 */]
[template public literal(literal : Literal)]
new [literal.dataType.name/]("[literal.value/]")
[/template]

[**
 * Internal name of an attibute of a element in a rule
 */]
[template public attr_name(attr : AttributeReference)]
[binding_name(attr.entity)/]_[attribute.name/]
[/template]

[**
 * Internal name of an situation participant in a rule
 */]
[template public sit_param_name(param : SituationParameterReference)]
[binding_name(param.situation)/]_[param.parameter.name/]
[/template]

[**
 * Representation in drools of a refered Node (literals, attributes, entities, situation)
 */]
[template public value(n : Node) post (trim())]
	[if (n.oclIsTypeOf(EntityParticipant))]
		[binding_name(n)/]
	[elseif (n.oclIsTypeOf(RelatorParticipant))]
		[binding_name(n)/] 
	[elseif (n.oclIsTypeOf(AttributeReference))]
		[attr_name(n.oclAsType(AttributeReference))/]
	[elseif (n.oclIsTypeOf(Literal))]
		[literal(n.oclAsType(Literal))/]
	[elseif (n.oclIsTypeOf(SituationParameterReference))]
		[sit_param_name(n.oclAsType(SituationParameterReference))/]
	[/if]
[/template]

[**
 * SML ComparativeRelation represented as operators in drools
 */]
[template public comparative_relation(rel : ComparativeRelation)]
[if(isNegated)]not [/if][rel.relation.name.replace('equals', '==').replace('greater than', '>')/][if (not parameter.oclIsUndefined() and not (parameter = ''))]['['/]"[parameter/]"[']'/][/if]
[/template]

[**
 * Drools representation of any relation between situation elements
 */]
[template public relations(node : Node) post (trim().replaceAll('\n', ', '))]
[if (node.oclIsTypeOf(EntityParticipant))]
[formal_relations(node.oclAsType(EntityParticipant))/]
[elseif (node.oclIsTypeOf(RelatorParticipant))]
[formal_relations(node.oclAsType(RelatorParticipant))/]
[material_relations(node.oclAsType(RelatorParticipant))/]
[elseif (node.oclIsKindOf(SituationParticipant))]
[situation_relations(node.oclAsType(SituationParticipant))/] 
[/if]
[/template]


[**
 * Formal relations between elements of a situation
 */]
[template public formal_relations(e : Participant) post (trim())]
[for (a : AttributeReference | e.reference.targetRelation.target.oclAsType(AttributeReference)->asOrderedSet())]
[attr_name(a)/]:[a.attribute.name/]
[/for]
[for (rel : ComparativeRelation | e.sourceRelation)]
this [comparative_relation(rel)/] [value(rel.target)/]
[/for]
[for (rel : ComparativeRelation | e.reference.sourceRelation->asOrderedSet())]
[let a : AttributeReference = rel.source.oclAsType(AttributeReference)][a.attribute.name/] [comparative_relation(rel)/] [value(rel.target)/][/let]
[/for]
[/template]

[**
 * Material relations between elements of a situation
 */]
[template public material_relations(rel : RelatorParticipant) post (trim())]
[for (link : Link | rel.eContainer(SituationType).eAllContents(Link)->select(l:Link | l.relator = rel ))]
[isOfType.name/] == [binding_name(entity)/]
[/for]
[/template]

[**
 * Situation specific relations (temporal and formal)
 */]
[template public situation_relations(s : SituationParticipant) post (trim())]
[for (a : TemporalOperatorExpression | eContainer(SituationType).eContents(TemporalOperatorExpression)->select(t:TemporalOperatorExpression| t.source = s))]
this [if(isNegated)]not [/if][operator/][if (not parameter.oclIsUndefined() and not (parameter = ''))]['['/][parameter/][']'/][/if] [binding_name(a.target)/]
[/for]
[for (p : SituationParameterReference | parameter)]
[if (p.targetRelation->size()>0)]
[sit_param_name(p)/]:[p.parameter.name/]
[/if]
[for (r : ComparativeRelation | p.sourceRelation)]
[p.parameter.name/] [comparative_relation(r)/] [value(r.target)/]
[/for]
[/for]
[/template]

