/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package sml.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import sml.util.SmlAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SmlItemProviderAdapterFactory extends SmlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SmlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link sml.SMLModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SMLModelItemProvider smlModelItemProvider;

	/**
	 * This creates an adapter for a {@link sml.SMLModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSMLModelAdapter() {
		if (smlModelItemProvider == null) {
			smlModelItemProvider = new SMLModelItemProvider(this);
		}

		return smlModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sml.SituationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SituationTypeItemProvider situationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link sml.SituationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSituationTypeAdapter() {
		if (situationTypeItemProvider == null) {
			situationTypeItemProvider = new SituationTypeItemProvider(this);
		}

		return situationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sml.SituationTypeBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SituationTypeBlockItemProvider situationTypeBlockItemProvider;

	/**
	 * This creates an adapter for a {@link sml.SituationTypeBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSituationTypeBlockAdapter() {
		if (situationTypeBlockItemProvider == null) {
			situationTypeBlockItemProvider = new SituationTypeBlockItemProvider(this);
		}

		return situationTypeBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sml.EntityParticipant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityParticipantItemProvider entityParticipantItemProvider;

	/**
	 * This creates an adapter for a {@link sml.EntityParticipant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityParticipantAdapter() {
		if (entityParticipantItemProvider == null) {
			entityParticipantItemProvider = new EntityParticipantItemProvider(this);
		}

		return entityParticipantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sml.RelatorParticipant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelatorParticipantItemProvider relatorParticipantItemProvider;

	/**
	 * This creates an adapter for a {@link sml.RelatorParticipant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelatorParticipantAdapter() {
		if (relatorParticipantItemProvider == null) {
			relatorParticipantItemProvider = new RelatorParticipantItemProvider(this);
		}

		return relatorParticipantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sml.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link sml.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sml.SituationTypeParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SituationTypeParameterItemProvider situationTypeParameterItemProvider;

	/**
	 * This creates an adapter for a {@link sml.SituationTypeParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSituationTypeParameterAdapter() {
		if (situationTypeParameterItemProvider == null) {
			situationTypeParameterItemProvider = new SituationTypeParameterItemProvider(this);
		}

		return situationTypeParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sml.AttributeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeReferenceItemProvider attributeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link sml.AttributeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeReferenceAdapter() {
		if (attributeReferenceItemProvider == null) {
			attributeReferenceItemProvider = new AttributeReferenceItemProvider(this);
		}

		return attributeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sml.ComparativeRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComparativeRelationItemProvider comparativeRelationItemProvider;

	/**
	 * This creates an adapter for a {@link sml.ComparativeRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComparativeRelationAdapter() {
		if (comparativeRelationItemProvider == null) {
			comparativeRelationItemProvider = new ComparativeRelationItemProvider(this);
		}

		return comparativeRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sml.Literal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LiteralItemProvider literalItemProvider;

	/**
	 * This creates an adapter for a {@link sml.Literal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLiteralAdapter() {
		if (literalItemProvider == null) {
			literalItemProvider = new LiteralItemProvider(this);
		}

		return literalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sml.SituationParticipant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SituationParticipantItemProvider situationParticipantItemProvider;

	/**
	 * This creates an adapter for a {@link sml.SituationParticipant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSituationParticipantAdapter() {
		if (situationParticipantItemProvider == null) {
			situationParticipantItemProvider = new SituationParticipantItemProvider(this);
		}

		return situationParticipantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sml.SituationParameterReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SituationParameterReferenceItemProvider situationParameterReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link sml.SituationParameterReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSituationParameterReferenceAdapter() {
		if (situationParameterReferenceItemProvider == null) {
			situationParameterReferenceItemProvider = new SituationParameterReferenceItemProvider(this);
		}

		return situationParameterReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sml.ExistsSituation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExistsSituationItemProvider existsSituationItemProvider;

	/**
	 * This creates an adapter for a {@link sml.ExistsSituation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExistsSituationAdapter() {
		if (existsSituationItemProvider == null) {
			existsSituationItemProvider = new ExistsSituationItemProvider(this);
		}

		return existsSituationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sml.Function} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionItemProvider functionItemProvider;

	/**
	 * This creates an adapter for a {@link sml.Function}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionAdapter() {
		if (functionItemProvider == null) {
			functionItemProvider = new FunctionItemProvider(this);
		}

		return functionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sml.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link sml.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (smlModelItemProvider != null) smlModelItemProvider.dispose();
		if (situationTypeItemProvider != null) situationTypeItemProvider.dispose();
		if (situationTypeBlockItemProvider != null) situationTypeBlockItemProvider.dispose();
		if (entityParticipantItemProvider != null) entityParticipantItemProvider.dispose();
		if (relatorParticipantItemProvider != null) relatorParticipantItemProvider.dispose();
		if (linkItemProvider != null) linkItemProvider.dispose();
		if (situationTypeParameterItemProvider != null) situationTypeParameterItemProvider.dispose();
		if (attributeReferenceItemProvider != null) attributeReferenceItemProvider.dispose();
		if (comparativeRelationItemProvider != null) comparativeRelationItemProvider.dispose();
		if (literalItemProvider != null) literalItemProvider.dispose();
		if (situationParticipantItemProvider != null) situationParticipantItemProvider.dispose();
		if (situationParameterReferenceItemProvider != null) situationParameterReferenceItemProvider.dispose();
		if (existsSituationItemProvider != null) existsSituationItemProvider.dispose();
		if (functionItemProvider != null) functionItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
	}

}
