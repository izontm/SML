[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/uml2/3.0.0/UML')]

[comment query that defines if a class is a relator /]
[query public isRelator(aClass : Type) : Boolean = 
  aClass.oclIsTypeOf(Class) and aClass.getAppliedStereotypes()->select(s : Stereotype|s.name = 'Relator')->size() = 1
/]

[query public isEntity(aClass : Type) : Boolean = 
  aClass.oclIsTypeOf(Class) and not aClass.isRelator()
/]

[query public isContextElement(element : Element) : Boolean =
  element.oclIsTypeOf(Class)
  or element.oclIsTypeOf(Association)
  or element.oclIsTypeOf(DataType)
/]

[comment main template that generate a Context model (xmi format) based on a UML model and a empty SML model that refers to the this model. /]
[template public generateElement(aModel : Model)]
[comment @main/]

[file (getProperty('contextFile'), false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<ctx:ContextModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ctx="http://www.example.org/ctx">
[let content : OrderedSet(Element) = aModel.packagedElement->select(p:PackageableElement | p.isContextElement())->asOrderedSet()]
	[for (element : Element | content)]
		[if (element.oclIsTypeOf(Class))]
			[let aClass : Class = element.oclAsType(Class)]
				[if (aClass.isRelator())]
  <elements xsi:type="ctx:RelatorClass" name="[aClass.name/]">
				[else]
  <elements xsi:type="ctx:EntityClass" name="[aClass.name/]"[if (aClass.generalization->size()>0)] superclass="//@elements.[content->indexOf(aClass.generalization->asSequence()->first().general)-1/]"[/if][if (aClass.isAbstract)] isAbstract="true"[/if]>
				[/if]
				[for (aProperty : Property | aClass.ownedAttribute)]
    <attribute name="[aProperty.name/]" datatype="//@elements.[content->indexOf(aProperty.type)-1/]"/>
				[/for]
  </elements>
			[/let]
		[/if]
		[if (element.oclIsTypeOf(DataType))]
			[let aDataType : DataType = element.oclAsType(DataType)]
  <elements xsi:type="ctx:DataType" name="[aDataType.name/]"/>
			[/let]
		[/if]
		[if (element.oclIsTypeOf(Association))]
			[let aAssociation : Association = element.oclAsType(Association)]
  <elements xsi:type="ctx:Association" name="[aAssociation.ownedEnd->select(p:Property|p.type.isEntity())->first().name/]" source="//@elements.[content->indexOf(aAssociation.ownedEnd->collect(p:Property|p.type)->select(c:Type|c.isRelator())->first())-1/]" target="//@elements.[content->indexOf(aAssociation.ownedEnd->collect(p:Property|p.type)->select(c:Type|c.isEntity())->first())-1/]"/>
			[/let]
		[/if]
	[/for]
[/let]
  <elements xsi:type="ctx:PrimitiveFormalRelation" name="equals"/>
  <elements xsi:type="ctx:PrimitiveFormalRelation" name="greather than"/>
  <elements xsi:type="ctx:PrimitiveFormalRelation" name="less than"/>
  <elements xsi:type="ctx:PrimitiveFormalRelation" name="greather than or equals"/>
  <elements xsi:type="ctx:PrimitiveFormalRelation" name="less than or equals"/>
</ctx:ContextModel>
[/file]

[file (getProperty('smlFile'), false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<sml:SMLModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:sml="http://www.example.org/sml">
  <contextModel href="[getProperty('contextFile')/]#/"/>
</sml:SMLModel>
[/file]

[/template]